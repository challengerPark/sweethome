<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="houseMapper">

	<resultMap type="house" id="houseResultSet">
		<result column="HOUSE_NO" property="houseNo"/>
		<result column="HOUSE_NAME" property="houseName"/>
		<result column="HOUSE_TITLE" property="houseTitle"/>
		<result column="HOUSE_INTRODUCE" property="houseIntroduce"/>
		<result column="SHARE_SPACE" property="shareSpace"/>
		<result column="PERSONAL_SPACE" property="personalSpace"/>
		<result column="TRAFFIC" property="traffic"/>
		<result column="CONVENIENCE" property="convenience"/>
		<result column="CONDITION" property="condition"/>
		<result column="STATUS" property="status"/>
		<result column="REPORT" property="report"/>
		<result column="ADDRESS" property="address"/>
		<result column="LATITUDE" property="latitude"/>
		<result column="LONGITUDE" property="longitude"/>
		<result column="USER_NO" property="userNo"/>
		<result column="ROOM_NAME" property="roomName"/>		
		<result column="HOUSE_GENDER" property="houseGender"/>
		<result column="MONTHLY" property="monthly"/>
		<result column="ROOM_NO" property="roomNo"/>
		<result column="FILE_PATH" property="filePath"/>
		<result column="FILE_LEVEL" property="fileLevel"/>
		<result column="PATH" property="path"/>
		
	</resultMap>




	<!-- 하우스 등록 쿼리문 -->

	<resultMap type="houseFile" id="houseFileResultSet">
		<result column="FILE_NO" property="fileNo"/>
		<result column="HOUSE_NO" property="houseNo"/>
		<result column="ROOM_NO" property="roomNo"/>
		<result column="ORIGIN_NAME" property="originName"/>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="PATH" property="path"/>
		<result column="FILE_PATH" property="filePath"/>
		<result column="FILE_LEVEL" property="fileLevel"/>
	</resultMap>



	<!-- 하우스 등록 쿼리문 -->


	<!-- 하우스 등록 -->


	<!-- 하우스 등록 -->

	<insert id="insertHouse" parameterType="house">
  		INSERT INTO
  			  HOUSE
  			  	    (
  			  	      HOUSE_NO
  			  	     ,HOUSE_NAME
  			  	     ,HOUSE_TITLE
  			  	     ,HOUSE_INTRODUCE
  			  	     ,SHARE_SPACE
  			  	     ,PERSONAL_SPACE
  			  	     ,TRAFFIC
  			  	     ,CONVENIENCE
  			  	     ,CONDITION
  			  	     ,STATUS
  			  	     ,REPORT
  			  	     ,ADDRESS
  			  	     ,LATITUDE
  			  	     ,LONGITUDE
  			  	     ,USER_NO
  			  	    )
  			 VALUES
  			 		(
  			 		  SEQ_HOUSE_NO.NEXTVAL
  			 		 ,#{houseName}
  			 		 ,#{houseTitle}
  			 		 ,#{houseIntroduce}
  			 		 ,#{shareSpace}
  			 		 ,#{personalSpace}
  			 		 ,#{traffic}
  			 		 ,#{convenience}
  			 		 ,DEFAULT
  			 		 ,DEFAULT
  			 		 ,DEFAULT
  			 		 ,#{address}
  			 		 ,#{latitude}
  			 		 ,#{longitude}
  			 		 ,#{userNo}
  			 		)
	</insert>
	<select id="selectHouse" parameterType="string" resultType="house">
		SELECT * FROM HOUSE WHERE HOUSE_NAME = #{houseName}
	</select>

	<!-- 내가 찜한 하우스 갯수 -->
	<select id="myDibsHouseCount" parameterType="_int" resultType="_int">
		SELECT 
				COUNT(1)
		  FROM 
		  		DIBS
		 WHERE
		 		USER_NO = #{userNo}
		   AND
		   		HOUSE_NO IS NOT NULL
		   AND 
		   		STATUS = 'Y'
	</select>
	
	<!-- 내가 찜한 하우스 목록 -->
	<select id="selectDibsHouses" resultMap="houseResultSet">
		SELECT 
				HOUSE_NO, HOUSE_NAME, HOUSE_GENDER, MIN(MONTHLY) MONTHLY, H.STATUS 
		FROM 
				HOUSE H
		JOIN 
				DIBS D USING(HOUSE_NO)
		JOIN
				(
				    <!-- HOUSE의 GENDER 구하기 -->
				    SELECT 
				    		HOUSE_NO
				    	  , DECODE(G_NUM, '2', '남녀공용', '1', DECODE(GENDER, 'M', '남성전용', 'W', '여성전용')) AS "HOUSE_GENDER"
				    FROM 
				    		ROOM
				    JOIN 
				    	(
					    <!-- HOUSE에 포함된 GENDER 수 세기 -->
					    SELECT 
					    		HOUSE_NO, COUNT(*) AS "G_NUM"
					    FROM
						    	(
						        <!-- HOUSE를 GENDER로 나누기 -->
						        SELECT 
						        		HOUSE_NO, GENDER
						        FROM 
						        		ROOM
						 		GROUP BY
						        		HOUSE_NO, GENDER
							    ) 
						GROUP BY 
								HOUSE_NO
					    ) USING(HOUSE_NO)
				) USING(HOUSE_NO)
		JOIN
				(
				    <!-- 각 HOUSE의 월세 최솟값 -->
				    SELECT 
				    		HOUSE_NO, ROOM_NO, SUM(RENT + EXPENSE + NVL(UTILITY, 0)) MONTHLY
				    FROM 
				    		ROOM 
				    GROUP BY 
				    		ROOM_NO, HOUSE_NO
			    ) USING(HOUSE_NO)
		WHERE 
				D.USER_NO = #{userNo}
		GROUP BY 
				HOUSE_NO, HOUSE_NAME, HOUSE_GENDER, H.STATUS
		ORDER BY 
				HOUSE_NO DESC
	</select>

	<select id="houseSearch" resultMap="houseResultSet">
		    SELECT HOUSE_NO, HOUSE_NAME, CONDITION , LATITUDE, LONGITUDE, HOUSE_GENDER, MIN(MONTHLY) MONTHLY, H.STATUS 
                FROM HOUSE h
		            JOIN  (
						    SELECT 
						    		HOUSE_NO
						    	  , DECODE(G_NUM, '2', '남녀공용', '1', DECODE(GENDER, 'M', '남성전용', 'W', '여성전용')) AS "HOUSE_GENDER"
						    FROM 
						    		ROOM
						    JOIN 
						    	(
							    SELECT 
							    		HOUSE_NO, COUNT(*) AS "G_NUM"
							    FROM
								    	(
								        SELECT 
								        		HOUSE_NO, GENDER
								        FROM 
								        		ROOM
								 		GROUP BY
								        		HOUSE_NO, GENDER
									    ) 
								GROUP BY 
										HOUSE_NO
							    ) USING(HOUSE_NO)
						) USING(HOUSE_NO)
		    
				      JOIN   (
				            SELECT HOUSE_NO, MIN(MONTHLY) MONTHLY
				            FROM HOUSE h
				            JOIN    (
								    SELECT 
								    		HOUSE_NO, ROOM_NO, SUM(RENT + EXPENSE) MONTHLY
								    FROM 
								    		ROOM 
								    GROUP BY 
								    		ROOM_NO, HOUSE_NO
				                    ) USING(HOUSE_NO)
				                    GROUP BY HOUSE_NO
				            )USING(HOUSE_NO)
				    WHERE STATUS = 'Y'
				    GROUP BY 
				    HOUSE_NO, HOUSE_NAME, CONDITION , LATITUDE, LONGITUDE, HOUSE_GENDER, H.STATUS
				    ORDER BY HOUSE_NO ASC 
				    
	</select>
	
		<select id="keywordSearch" resultMap="houseResultSet">
		SELECT HOUSE_NO, HOUSE_NAME, CONDITION , LATITUDE, LONGITUDE, HOUSE_GENDER, MIN(MONTHLY) MONTHLY, H.STATUS , Min(FILE_PATH) PATH
		FROM HOUSE h
		            JOIN  (
						    SELECT 
						    		HOUSE_NO
						    	  , DECODE(G_NUM, '2', '남녀공용', '1', DECODE(GENDER, 'M', '남성전용', 'W', '여성전용')) AS "HOUSE_GENDER"
						    FROM 
						    		ROOM
						    JOIN 
						    	(
							    SELECT 
							    		HOUSE_NO, COUNT(*) AS "G_NUM"
							    FROM
								    	(
								        SELECT 
								        		HOUSE_NO, GENDER
								        FROM 
								        		ROOM
								 		GROUP BY
								        		HOUSE_NO, GENDER
									    ) 
								GROUP BY 
										HOUSE_NO
							    ) USING(HOUSE_NO)
						) USING(HOUSE_NO)
		    
				      JOIN   (
				            SELECT HOUSE_NO, MIN(MONTHLY) MONTHLY
				            FROM HOUSE h
				            JOIN    (
								    SELECT 
								    		HOUSE_NO, ROOM_NO, SUM(RENT + EXPENSE) MONTHLY
								    FROM 
								    		ROOM 
								    GROUP BY 
								    		ROOM_NO, HOUSE_NO
				                    ) USING(HOUSE_NO)
				                    GROUP BY HOUSE_NO
				            )USING(HOUSE_NO)
                    JOIN
                        (
                        SELECT HOUSE_NO ,FILE_PATH
                         FROM HOUSE_FILE
                         WHERE FILE_LEVEL = 1
                         GROUP BY HOUSE_NO ,FILE_PATH
                         )USING(HOUSE_NO)
				    WHERE STATUS = 'Y' and address like '%' || #{keyword} || '%'
				    GROUP BY 
				    HOUSE_NO, HOUSE_NAME, CONDITION , LATITUDE, LONGITUDE, HOUSE_GENDER, H.STATUS
				    ORDER BY HOUSE_NO ASC 
		</select>
	
	<select id="selectHouseCount" resultType="_int">
  		SELECT 
  				COUNT(*)
  		  FROM 
  		  		HOUSE
  		 WHERE
  		 		STATUS = 'Y'
  	</select>

  	<select id="houseDetail" resultMap="houseResultSet">
  		SELECT * FROM HOUSE WHERE HOUSE_NO = #{hno}
  	</select>
  	
  	<!-- 하우스 파일 등록 -->
  	<insert id="insertHouseFile" parameterType="houseFile">
  		INSERT
			INTO HOUSE_FILE(
								 FILE_NO
								,HOUSE_NO
								<choose>
									<when test="roomNo != 0">
										,ROOM_NO
									</when>
									<otherwise>
									</otherwise>
								</choose>
								,ORIGIN_NAME
								,CHANGE_NAME
								,FILE_PATH
								,FILE_LEVEL
							)
					VALUES(
								 SEQ_HOUSE_FILE_NO.NEXTVAL
								,SEQ_HOUSE_NO.CURRVAL
								<choose>
									<when test="roomNo != 0">
										,#{roomNo}
									</when>
									<otherwise>
									</otherwise>
								</choose>
								,#{originName}
								,#{changeName}
								,#{filePath}
								,#{fileLevel}
							)
  	</insert>
  	
  	<!-- 하우스 삭제 -->
  	<update id="deleteHouse" parameterType="hashMap">
  		UPDATE
  				HOUSE
  		SET
  				STATUS = 'N'
  		WHERE
  				HOUSE_NO = #{houseNo}
  			AND
  				USER_NO = #{userNo}
  	</update>
  	
  	<!-- 해당 하우스 파일 목록 가져오기 -->
  	<select id="selectHouseFile" parameterType="_int" resultMap="houseFileResultSet">
  		SELECT
  				*
  		FROM
  				HOUSE_FILE
  		WHERE
  				HOUSE_NO = #{hno}
  	</select>
  	
  	<!-- 해당 하우스 파일 삭제 -->
  	<delete id="deleteHouseFile" parameterType="_int">
  		DELETE FROM
  					HOUSE_FILE
  		WHERE
  					HOUSE_NO = #{hno}
  	</delete>
  	<select id="houseSearchOne" resultMap="houseResultSet">
  		SELECT HOUSE_NO,USER_NO
			 FROM HOUSE
			 JOIN MEMBER USING(USER_NO)
  	</select>
  	
  	<!-- 하우스 번호로 하우스 정보 가져오기 -->
  	<select id="selectHouseByNo" parameterType="_int" resultMap="houseResultSet">
  		SELECT
  				*
  		FROM
  				HOUSE
  		WHERE
  				HOUSE_NO = #{hno}
  		AND
  				STATUS = 'Y'
  	</select>
  	
  	<!-- 하우스 수정 -->
  	<update id="updateHouse" parameterType="house">
  		UPDATE
  				 HOUSE
  		SET
  				 HOUSE_NAME = #{houseName}
  				,HOUSE_TITLE = #{houseTitle}
  				,HOUSE_INTRODUCE = #{houseIntroduce}
  				,SHARE_SPACE = #{shareSpace}
				,PERSONAL_SPACE = #{personalSpace}
				,TRAFFIC = #{traffic}
				,CONVENIENCE = #{convenience}
				,CONDITION = #{condition}
				,ADDRESS = #{address}
				,LATITUDE = #{latitude}
				,LONGITUDE = #{longitude}
		WHERE
				 HOUSE_NO = #{houseNo}
  	</update>
  	
  	<!-- 해당 방 파일 목록 가져오기 -->
  	<select id="selectRoomFile" parameterType="_int" resultMap="houseFileResultSet">
  		SELECT
  				*
  		FROM
  				HOUSE_FILE
  		WHERE
  				ROOM_NO = #{roomNo}
  	</select>
  	
	<!-- 해당 하우스 파일 삭제 -->
  	<delete id="deleteRoomFile" parameterType="_int">
  		DELETE FROM
  					HOUSE_FILE
  		WHERE
  					ROOM_NO = #{roomNo}
  	</delete>
  	
	<!-- 해당 하우스 대표 파일 목록 가져오기 -->
  	<select id="selectPrimaryHouseFile" parameterType="_int" resultMap="houseFileResultSet">
  		SELECT
  				*
  		FROM
  				HOUSE_FILE
  		WHERE
  				HOUSE_NO = #{hno}
  		AND
  				ROOM_NO IS NULL
  	</select>
  	
  	<!-- 해당 하우스 대표 파일 삭제 -->
  	<delete id="deletePrimaryHouseFile" parameterType="_int">
  		DELETE FROM
  					HOUSE_FILE
  		WHERE
  					HOUSE_NO = #{hno}
		AND
  					ROOM_NO IS NULL
  	</delete>
  	
  	<select id="houseSearchTwo" resultMap="houseFileResultSet">
  		SELECT HOUSE_NO,MIN(FILE_PATH) PATH
               FROM HOUSE
               JOIN HOUSE_FILE USING(HOUSE_NO)
            	WHERE STATUS = 'Y' and FILE_LEVEL = 1
                GROUP BY HOUSE_NO
         ORDER BY HOUSE_NO ASC 
  	</select>

</mapper>